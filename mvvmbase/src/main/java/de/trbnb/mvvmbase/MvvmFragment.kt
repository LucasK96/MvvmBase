package de.trbnb.mvvmbase

import android.databinding.DataBindingUtil
import android.databinding.Observable
import android.databinding.ViewDataBinding
import android.os.Bundle
import android.support.v4.app.Fragment
import android.support.v4.app.LoaderManager
import android.support.v4.content.Loader
import android.view.LayoutInflater
import android.view.View
import android.view.ViewGroup
import javax.inject.Provider

/**
 * The key for [Bundle]s to store the Loader ID.
 */
private const val LOADER_ID_KEY = "de.trbnb.mvvmbase:loader_id"

/**
 * Base class for Frgaments that serve as view within an MVVM structure.
 *
 * It automatically creates the binding and sets the view model as that bindings parameter.
 * Note that the parameter has to have to name "vm".
 *
 * The view model will be loaded by the [ViewModelLoader], thus making sure it survives the Fragments
 * lifecycle. If a Fragment is created for the first time the Loader will instantiate the view model
 * via the [viewModelProvider]. This [Provider] can either be implemented manually or injected by
 * Dagger.
 *
 * @param[VM] The type of the specific [ViewModel] implementation for this Fragment.
 */
abstract class MvvmFragment<VM : ViewModel> : Fragment(), LoaderManager.LoaderCallbacks<VM> {

    /**
     * The Loader ID for the [ViewModelLoader].
     * Is generated by the [LoaderIdGenerator] on the first creation of this Fragment and the saved
     * from the lifecycle via the "savedInstanceState" [Bundle].
     */
    private var loaderID: Int = LoaderIdGenerator.NO_ID

    /**
     * The [ViewDataBinding] implementation for a specific layout.
     * Will only be set in [onCreateView].
     */
    protected lateinit var binding: ViewDataBinding
        private set

    /**
     * The [ViewModel] that is used for data binding.
     */
    protected var viewModel: VM? = null
        set(value) {
            if(field === value) return

            field?.removeOnPropertyChangedCallback(viewModelObserver)

            field = value
            val bindingWasSuccessful = binding.setVariable(viewModelBindingId, value)

            if(!bindingWasSuccessful){
                throw RuntimeException("Unable to set the ViewModel for the variable $viewModelBindingId.")
            }

            value?.let {
                onViewModelLoaded(it)
                it.addOnPropertyChangedCallback(viewModelObserver)
            }
        }

    /**
     * The [BR] value that is used as parameter for the view model in the binding.
     * Is always [BR.vm].
     */
    private val viewModelBindingId: Int
        get() = BR.vm

    /**
     * The layout resource ID for this Fragment.
     * Is used in [onCreateView] to create the [ViewDataBinding].
     */
    protected abstract val layoutId: Int

    /**
     * The [Provider] implementation that is used by the [ViewModelLoader] if a new view model
     * has to be instantiated. Can either be implemented manually or injected by Dagger.
     */
    abstract val viewModelProvider: Provider<VM>

    /**
     * Callback implementation that delegates the parametes to [onViewModelPropertyChanged].
     */
    private val viewModelObserver = object : Observable.OnPropertyChangedCallback(){
        @Suppress("UNCHECKED_CAST")
        override fun onPropertyChanged(sender: Observable, fieldId: Int) {
            onViewModelPropertyChanged(sender as VM, fieldId)
        }
    }

    /**
     * Called by the lifecycle.
     * Restores/generates the [loaderID].
     */
    override fun onCreate(savedInstanceState: Bundle?) {
        super.onCreate(savedInstanceState)

        val savedLoaderId = savedInstanceState?.getInt(LOADER_ID_KEY, LoaderIdGenerator.NO_ID) ?: loaderID

        loaderID = when (savedLoaderId) {
            LoaderIdGenerator.NO_ID -> LoaderIdGenerator.generate()
            else                    -> savedLoaderId
        }
    }

    /**
     * Called by the lifecycle.
     * Saves the [loaderID] into the [outState].
     */
    override fun onSaveInstanceState(outState: Bundle) {
        super.onSaveInstanceState(outState)

        outState.putInt(LOADER_ID_KEY, loaderID)
    }

    /**
     * Called by the lifecycle.
     *
     * Creates the [ViewDataBinding] and initializes the [ViewModelLoader].
     */
    override fun onCreateView(inflater: LayoutInflater, container: ViewGroup?, savedInstanceState: Bundle?): View {
        binding = initBinding(inflater, container)

        initLoader()

        return binding.root
    }

    /**
     * Creates the [ViewDataBinding].
     *
     * @return The new [ViewDataBinding] instance that fits this Fragment.
     */
    private fun initBinding(inflater: LayoutInflater, container: ViewGroup?): ViewDataBinding {
        return DataBindingUtil.inflate(inflater, layoutId, container, false)
    }

    //region Loader
    /**
     * Initializes the Loader mechanism.
     */
    private fun initLoader(){
        activity.supportLoaderManager.initLoader(loaderID, null, this)
    }

    /**
     * Called by the Loader API when a new [ViewModelLoader] instance is needed.
     *
     * @param[id] The ID whose loader is to be created. Will be [LOADER_ID].
     * @param[args] Any arguments supplied by the caller.
     *
     * @return A new [ViewModelLoader] instance.
     */
    override fun onCreateLoader(id: Int, args: Bundle?): Loader<VM> {
        return ViewModelLoader(context, viewModelProvider)
    }

    /**
     * Called by the Loader API when the [ViewModelLoader] delivers a view model via [Loader.deliverResult].
     * Sets the loaded [ViewModel] instance as [viewModel].
     *
     * @param[loader] The [ViewModelLoader] that delivered the view model.
     * @param[data] The delivered [ViewModel] instance.
     */
    override fun onLoadFinished(loader: Loader<VM>, data: VM) {
        viewModel = data
    }

    /**
     * Called by the Loader API when the [ViewModelLoader] will be reset.
     * Nothing happens here because we handle this already in the ViewModelLoader implementation.
     *
     * @param[loader] The Loader that is reset.
     */
    override fun onLoaderReset(loader: Loader<VM>?) { }
    //endregion

    /**
     * Called when the view model has been delivered by the [ViewModelLoader] and is set as [viewModel].
     *
     * @param[viewModel] The [ViewModel] instance that was loaded.
     */
    protected open fun onViewModelLoaded(viewModel: VM) { }

    /**
     * Called when the view model notifies listeners that a property has changed.
     *
     * @param[viewModel] The [ViewModel] instance whose property has changed.
     * @param[fieldId] The ID of the field in the BR file that indicates which property in the view model has changed.
     */
    protected open fun onViewModelPropertyChanged(viewModel: VM, fieldId: Int) { }

    /**
     * Called by the lifecycle.
     * Removes the view model callback.
     * If the hosting Activity is finishing the view model is notified.
     */
    override fun onDestroy() {
        super.onDestroy()

        viewModel?.removeOnPropertyChangedCallback(viewModelObserver)

        if(activity.isFinishing){
            viewModel?.onViewFinishing()
        }
    }
}